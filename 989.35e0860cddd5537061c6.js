"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([[989],{

/***/ 6383:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ TextGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9451);\n/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  depth: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\n\n\nclass TextGeometry extends three__WEBPACK_IMPORTED_MODULE_0__/* .ExtrudeGeometry */ .QCA {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tif ( parameters.depth === undefined && parameters.height !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.TextGeometry: .height is now depreciated. Please use .depth instead' ); // @deprecated, r163\n\n\t\t\t}\n\n\t\t\tparameters.depth = parameters.depth !== undefined ?\n\t\t\t\tparameters.depth : parameters.height !== undefined ?\n\t\t\t\t\tparameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM4My5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWU7O0FBRWYsMkJBQTJCLDZEQUFlOztBQUUxQyxvQ0FBb0M7O0FBRXBDOztBQUVBOztBQUVBLFlBQVk7O0FBRVosSUFBSTs7QUFFSjs7QUFFQTs7QUFFQTs7QUFFQSxpR0FBaUc7O0FBRWpHOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7OztBQUd3QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL2dlb21ldHJpZXMvVGV4dEdlb21ldHJ5LmpzPzAzODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXh0ID0gM0QgVGV4dFxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZm9udDogPFRIUkVFLkZvbnQ+LCAvLyBmb250XG4gKlxuICogIHNpemU6IDxmbG9hdD4sIC8vIHNpemUgb2YgdGhlIHRleHRcbiAqICBkZXB0aDogPGZsb2F0PiwgLy8gdGhpY2tuZXNzIHRvIGV4dHJ1ZGUgdGV4dFxuICogIGN1cnZlU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIG9uIHRoZSBjdXJ2ZXNcbiAqXG4gKiAgYmV2ZWxFbmFibGVkOiA8Ym9vbD4sIC8vIHR1cm4gb24gYmV2ZWxcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0ZXh0IGJldmVsIGdvZXNcbiAqICBiZXZlbFNpemU6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgKGluY2x1ZGluZyBiZXZlbE9mZnNldCkgaXMgYmV2ZWxcbiAqICBiZXZlbE9mZnNldDogPGZsb2F0PiAvLyBob3cgZmFyIGZyb20gdGV4dCBvdXRsaW5lIGRvZXMgYmV2ZWwgc3RhcnRcbiAqIH1cbiAqL1xuXG5pbXBvcnQge1xuXHRFeHRydWRlR2VvbWV0cnlcbn0gZnJvbSAndGhyZWUnO1xuXG5jbGFzcyBUZXh0R2VvbWV0cnkgZXh0ZW5kcyBFeHRydWRlR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCB0ZXh0LCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRjb25zdCBmb250ID0gcGFyYW1ldGVycy5mb250O1xuXG5cdFx0aWYgKCBmb250ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN1cGVyKCk7IC8vIGdlbmVyYXRlIGRlZmF1bHQgZXh0cnVkZSBnZW9tZXRyeVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGVzID0gZm9udC5nZW5lcmF0ZVNoYXBlcyggdGV4dCwgcGFyYW1ldGVycy5zaXplICk7XG5cblx0XHRcdC8vIHRyYW5zbGF0ZSBwYXJhbWV0ZXJzIHRvIEV4dHJ1ZGVHZW9tZXRyeSBBUElcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzLmRlcHRoID09PSB1bmRlZmluZWQgJiYgcGFyYW1ldGVycy5oZWlnaHQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UZXh0R2VvbWV0cnk6IC5oZWlnaHQgaXMgbm93IGRlcHJlY2lhdGVkLiBQbGVhc2UgdXNlIC5kZXB0aCBpbnN0ZWFkJyApOyAvLyBAZGVwcmVjYXRlZCwgcjE2M1xuXG5cdFx0XHR9XG5cblx0XHRcdHBhcmFtZXRlcnMuZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRwYXJhbWV0ZXJzLmRlcHRoIDogcGFyYW1ldGVycy5oZWlnaHQgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdFx0cGFyYW1ldGVycy5oZWlnaHQgOiA1MDtcblxuXHRcdFx0Ly8gZGVmYXVsdHNcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzLmJldmVsVGhpY2tuZXNzID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsVGhpY2tuZXNzID0gMTA7XG5cdFx0XHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxTaXplID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsU2l6ZSA9IDg7XG5cdFx0XHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxFbmFibGVkID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHRzdXBlciggc2hhcGVzLCBwYXJhbWV0ZXJzICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnR5cGUgPSAnVGV4dEdlb21ldHJ5JztcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBUZXh0R2VvbWV0cnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6383\n");

/***/ }),

/***/ 8334:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   K: () => (/* binding */ Font)\n/* harmony export */ });\n/* unused harmony export FontLoader */\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9451);\n\n\nclass FontLoader extends three__WEBPACK_IMPORTED_MODULE_0__/* .Loader */ .aHM {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new three__WEBPACK_IMPORTED_MODULE_0__/* .FileLoader */ .Y9S( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new three__WEBPACK_IMPORTED_MODULE_0__/* .ShapePath */ .Ld9();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMzNC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUllOztBQUVmLHlCQUF5QixvREFBTTs7QUFFL0I7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEscUJBQXFCLHdEQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxzQ0FBc0MsUUFBUTs7QUFFOUM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGtCQUFrQixrQkFBa0I7O0FBRXBDOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsa0JBQWtCLHVEQUFTOztBQUUzQjs7QUFFQTs7QUFFQTs7QUFFQSx1Q0FBdUMsT0FBTzs7QUFFOUM7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxVQUFVOztBQUVWOztBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvRm9udExvYWRlci5qcz83YTIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEZpbGVMb2FkZXIsXG5cdExvYWRlcixcblx0U2hhcGVQYXRoXG59IGZyb20gJ3RocmVlJztcblxuY2xhc3MgRm9udExvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRoaXMud2l0aENyZWRlbnRpYWxzICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRjb25zdCBmb250ID0gc2NvcGUucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggZm9udCApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdHJldHVybiBuZXcgRm9udCgganNvbiApO1xuXG5cdH1cblxufVxuXG4vL1xuXG5jbGFzcyBGb250IHtcblxuXHRjb25zdHJ1Y3RvciggZGF0YSApIHtcblxuXHRcdHRoaXMuaXNGb250ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdGb250JztcblxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cblx0fVxuXG5cdGdlbmVyYXRlU2hhcGVzKCB0ZXh0LCBzaXplID0gMTAwICkge1xuXG5cdFx0Y29uc3Qgc2hhcGVzID0gW107XG5cdFx0Y29uc3QgcGF0aHMgPSBjcmVhdGVQYXRocyggdGV4dCwgc2l6ZSwgdGhpcy5kYXRhICk7XG5cblx0XHRmb3IgKCBsZXQgcCA9IDAsIHBsID0gcGF0aHMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7XG5cblx0XHRcdHNoYXBlcy5wdXNoKCAuLi5wYXRoc1sgcCBdLnRvU2hhcGVzKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhzKCB0ZXh0LCBzaXplLCBkYXRhICkge1xuXG5cdGNvbnN0IGNoYXJzID0gQXJyYXkuZnJvbSggdGV4dCApO1xuXHRjb25zdCBzY2FsZSA9IHNpemUgLyBkYXRhLnJlc29sdXRpb247XG5cdGNvbnN0IGxpbmVfaGVpZ2h0ID0gKCBkYXRhLmJvdW5kaW5nQm94LnlNYXggLSBkYXRhLmJvdW5kaW5nQm94LnlNaW4gKyBkYXRhLnVuZGVybGluZVRoaWNrbmVzcyApICogc2NhbGU7XG5cblx0Y29uc3QgcGF0aHMgPSBbXTtcblxuXHRsZXQgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGNvbnN0IGNoYXIgPSBjaGFyc1sgaSBdO1xuXG5cdFx0aWYgKCBjaGFyID09PSAnXFxuJyApIHtcblxuXHRcdFx0b2Zmc2V0WCA9IDA7XG5cdFx0XHRvZmZzZXRZIC09IGxpbmVfaGVpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcmV0ID0gY3JlYXRlUGF0aCggY2hhciwgc2NhbGUsIG9mZnNldFgsIG9mZnNldFksIGRhdGEgKTtcblx0XHRcdG9mZnNldFggKz0gcmV0Lm9mZnNldFg7XG5cdFx0XHRwYXRocy5wdXNoKCByZXQucGF0aCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcGF0aHM7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0aCggY2hhciwgc2NhbGUsIG9mZnNldFgsIG9mZnNldFksIGRhdGEgKSB7XG5cblx0Y29uc3QgZ2x5cGggPSBkYXRhLmdseXBoc1sgY2hhciBdIHx8IGRhdGEuZ2x5cGhzWyAnPycgXTtcblxuXHRpZiAoICEgZ2x5cGggKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRm9udDogY2hhcmFjdGVyIFwiJyArIGNoYXIgKyAnXCIgZG9lcyBub3QgZXhpc3RzIGluIGZvbnQgZmFtaWx5ICcgKyBkYXRhLmZhbWlseU5hbWUgKyAnLicgKTtcblxuXHRcdHJldHVybjtcblxuXHR9XG5cblx0Y29uc3QgcGF0aCA9IG5ldyBTaGFwZVBhdGgoKTtcblxuXHRsZXQgeCwgeSwgY3B4LCBjcHksIGNweDEsIGNweTEsIGNweDIsIGNweTI7XG5cblx0aWYgKCBnbHlwaC5vICkge1xuXG5cdFx0Y29uc3Qgb3V0bGluZSA9IGdseXBoLl9jYWNoZWRPdXRsaW5lIHx8ICggZ2x5cGguX2NhY2hlZE91dGxpbmUgPSBnbHlwaC5vLnNwbGl0KCAnICcgKSApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gb3V0bGluZS5sZW5ndGg7IGkgPCBsOyApIHtcblxuXHRcdFx0Y29uc3QgYWN0aW9uID0gb3V0bGluZVsgaSArKyBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBhY3Rpb24gKSB7XG5cblx0XHRcdFx0Y2FzZSAnbSc6IC8vIG1vdmVUb1xuXG5cdFx0XHRcdFx0eCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHR5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5tb3ZlVG8oIHgsIHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2wnOiAvLyBsaW5lVG9cblxuXHRcdFx0XHRcdHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0eSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdxJzogLy8gcXVhZHJhdGljQ3VydmVUb1xuXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGNweDEsIGNweTEsIGNweCwgY3B5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdiJzogLy8gYmV6aWVyQ3VydmVUb1xuXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cdFx0XHRcdFx0Y3B4MiA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5iZXppZXJDdXJ2ZVRvKCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyLCBjcHgsIGNweSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgb2Zmc2V0WDogZ2x5cGguaGEgKiBzY2FsZSwgcGF0aDogcGF0aCB9O1xuXG59XG5cbmV4cG9ydCB7IEZvbnRMb2FkZXIsIEZvbnQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8334\n");

/***/ }),

/***/ 4741:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  s: () => (/* binding */ EffectComposer)\n});\n\n// EXTERNAL MODULE: ../node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(9451);\n// EXTERNAL MODULE: ../node_modules/three/examples/jsm/shaders/CopyShader.js\nvar CopyShader = __webpack_require__(9946);\n// EXTERNAL MODULE: ../node_modules/three/examples/jsm/postprocessing/Pass.js\nvar Pass = __webpack_require__(7598);\n;// CONCATENATED MODULE: ../node_modules/three/examples/jsm/postprocessing/ShaderPass.js\n\n\n\nclass ShaderPass extends Pass/* Pass */.o {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof three_module/* ShaderMaterial */.BKk ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = three_module/* UniformsUtils */.LlO.clone( shader.uniforms );\n\n\t\t\tthis.material = new three_module/* ShaderMaterial */.BKk( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new Pass/* FullScreenQuad */.F( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\n\n\n;// CONCATENATED MODULE: ../node_modules/three/examples/jsm/postprocessing/MaskPass.js\n\n\nclass MaskPass extends Pass/* Pass */.o {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass/* Pass */.o {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\n\n\n;// CONCATENATED MODULE: ../node_modules/three/examples/jsm/postprocessing/EffectComposer.js\n\n\n\n\n\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new three_module/* Vector2 */.I9Y() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new three_module/* WebGLRenderTarget */.nWS( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: three_module/* HalfFloatType */.ix0 } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader/* CopyShader */.Z );\n\t\tthis.copyPass.material.blending = three_module/* NoBlending */.XIg;\n\n\t\tthis.clock = new three_module/* Clock */.zD7();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new three_module/* Vector2 */.I9Y() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4741\n");

/***/ }),

/***/ 7598:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F: () => (/* binding */ FullScreenQuad),\n/* harmony export */   o: () => (/* binding */ Pass)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9451);\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new three__WEBPACK_IMPORTED_MODULE_0__/* .OrthographicCamera */ .qUd( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends three__WEBPACK_IMPORTED_MODULE_0__/* .BufferGeometry */ .LoY {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new three__WEBPACK_IMPORTED_MODULE_0__/* .Float32BufferAttribute */ .qtW( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new three__WEBPACK_IMPORTED_MODULE_0__/* .Float32BufferAttribute */ .qtW( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new three__WEBPACK_IMPORTED_MODULE_0__/* .Mesh */ .eaF( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU5OC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUtlOztBQUVmOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsb0JBQW9CLGdFQUFrQjs7QUFFdEM7O0FBRUEseUNBQXlDLDREQUFjOztBQUV2RDs7QUFFQTs7QUFFQSxxQ0FBcUMsb0VBQXNCO0FBQzNELCtCQUErQixvRUFBc0I7O0FBRXJEOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLG1CQUFtQixrREFBSTs7QUFFdkI7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vcG9zdHByb2Nlc3NpbmcvUGFzcy5qcz8xZTczIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEJ1ZmZlckdlb21ldHJ5LFxuXHRGbG9hdDMyQnVmZmVyQXR0cmlidXRlLFxuXHRPcnRob2dyYXBoaWNDYW1lcmEsXG5cdE1lc2hcbn0gZnJvbSAndGhyZWUnO1xuXG5jbGFzcyBQYXNzIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuaXNQYXNzID0gdHJ1ZTtcblxuXHRcdC8vIGlmIHNldCB0byB0cnVlLCB0aGUgcGFzcyBpcyBwcm9jZXNzZWQgYnkgdGhlIGNvbXBvc2VyXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdC8vIGlmIHNldCB0byB0cnVlLCB0aGUgcGFzcyBpbmRpY2F0ZXMgdG8gc3dhcCByZWFkIGFuZCB3cml0ZSBidWZmZXIgYWZ0ZXIgcmVuZGVyaW5nXG5cdFx0dGhpcy5uZWVkc1N3YXAgPSB0cnVlO1xuXG5cdFx0Ly8gaWYgc2V0IHRvIHRydWUsIHRoZSBwYXNzIGNsZWFycyBpdHMgYnVmZmVyIGJlZm9yZSByZW5kZXJpbmdcblx0XHR0aGlzLmNsZWFyID0gZmFsc2U7XG5cblx0XHQvLyBpZiBzZXQgdG8gdHJ1ZSwgdGhlIHJlc3VsdCBvZiB0aGUgcGFzcyBpcyByZW5kZXJlZCB0byBzY3JlZW4uIFRoaXMgaXMgc2V0IGF1dG9tYXRpY2FsbHkgYnkgRWZmZWN0Q29tcG9zZXIuXG5cdFx0dGhpcy5yZW5kZXJUb1NjcmVlbiA9IGZhbHNlO1xuXG5cdH1cblxuXHRzZXRTaXplKCAvKiB3aWR0aCwgaGVpZ2h0ICovICkge31cblxuXHRyZW5kZXIoIC8qIHJlbmRlcmVyLCB3cml0ZUJ1ZmZlciwgcmVhZEJ1ZmZlciwgZGVsdGFUaW1lLCBtYXNrQWN0aXZlICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlBhc3M6IC5yZW5kZXIoKSBtdXN0IGJlIGltcGxlbWVudGVkIGluIGRlcml2ZWQgcGFzcy4nICk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7fVxuXG59XG5cbi8vIEhlbHBlciBmb3IgcGFzc2VzIHRoYXQgbmVlZCB0byBmaWxsIHRoZSB2aWV3cG9ydCB3aXRoIGEgc2luZ2xlIHF1YWQuXG5cbmNvbnN0IF9jYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDEsIDEsIDEsIC0gMSwgMCwgMSApO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMjEzNThcblxuY2xhc3MgRnVsbHNjcmVlblRyaWFuZ2xlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIC0gMSwgMywgMCwgLSAxLCAtIDEsIDAsIDMsIC0gMSwgMCBdLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMiwgMCwgMCwgMiwgMCBdLCAyICkgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX2dlb21ldHJ5ID0gbmV3IEZ1bGxzY3JlZW5UcmlhbmdsZUdlb21ldHJ5KCk7XG5cbmNsYXNzIEZ1bGxTY3JlZW5RdWFkIHtcblxuXHRjb25zdHJ1Y3RvciggbWF0ZXJpYWwgKSB7XG5cblx0XHR0aGlzLl9tZXNoID0gbmV3IE1lc2goIF9nZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX21lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRyZW5kZXIoIHJlbmRlcmVyICkge1xuXG5cdFx0cmVuZGVyZXIucmVuZGVyKCB0aGlzLl9tZXNoLCBfY2FtZXJhICk7XG5cblx0fVxuXG5cdGdldCBtYXRlcmlhbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9tZXNoLm1hdGVyaWFsO1xuXG5cdH1cblxuXHRzZXQgbWF0ZXJpYWwoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IHZhbHVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBQYXNzLCBGdWxsU2NyZWVuUXVhZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7598\n");

/***/ }),

/***/ 6174:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ RenderPass)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9451);\n/* harmony import */ var _Pass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7598);\n\n\n\nclass RenderPass extends _Pass_js__WEBPACK_IMPORTED_MODULE_0__/* .Pass */ .o {\n\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new three__WEBPACK_IMPORTED_MODULE_1__/* .Color */ .Q1f();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE3NC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVlO0FBQ2tCOztBQUVqQyx5QkFBeUIsbURBQUk7O0FBRTdCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbURBQUs7O0FBRWpDOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vcG9zdHByb2Nlc3NpbmcvUmVuZGVyUGFzcy5qcz8xMjYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbG9yXG59IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFBhc3MgfSBmcm9tICcuL1Bhc3MuanMnO1xuXG5jbGFzcyBSZW5kZXJQYXNzIGV4dGVuZHMgUGFzcyB7XG5cblx0Y29uc3RydWN0b3IoIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgPSBudWxsLCBjbGVhckNvbG9yID0gbnVsbCwgY2xlYXJBbHBoYSA9IG51bGwgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5zY2VuZSA9IHNjZW5lO1xuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0dGhpcy5vdmVycmlkZU1hdGVyaWFsID0gb3ZlcnJpZGVNYXRlcmlhbDtcblxuXHRcdHRoaXMuY2xlYXJDb2xvciA9IGNsZWFyQ29sb3I7XG5cdFx0dGhpcy5jbGVhckFscGhhID0gY2xlYXJBbHBoYTtcblxuXHRcdHRoaXMuY2xlYXIgPSB0cnVlO1xuXHRcdHRoaXMuY2xlYXJEZXB0aCA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNTd2FwID0gZmFsc2U7XG5cdFx0dGhpcy5fb2xkQ2xlYXJDb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdH1cblxuXHRyZW5kZXIoIHJlbmRlcmVyLCB3cml0ZUJ1ZmZlciwgcmVhZEJ1ZmZlciAvKiwgZGVsdGFUaW1lLCBtYXNrQWN0aXZlICovICkge1xuXG5cdFx0Y29uc3Qgb2xkQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXG5cdFx0bGV0IG9sZENsZWFyQWxwaGEsIG9sZE92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHRpZiAoIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHtcblxuXHRcdFx0b2xkT3ZlcnJpZGVNYXRlcmlhbCA9IHRoaXMuc2NlbmUub3ZlcnJpZGVNYXRlcmlhbDtcblxuXHRcdFx0dGhpcy5zY2VuZS5vdmVycmlkZU1hdGVyaWFsID0gdGhpcy5vdmVycmlkZU1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyQ29sb3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHJlbmRlcmVyLmdldENsZWFyQ29sb3IoIHRoaXMuX29sZENsZWFyQ29sb3IgKTtcblx0XHRcdHJlbmRlcmVyLnNldENsZWFyQ29sb3IoIHRoaXMuY2xlYXJDb2xvciwgcmVuZGVyZXIuZ2V0Q2xlYXJBbHBoYSgpICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJBbHBoYSAhPT0gbnVsbCApIHtcblxuXHRcdFx0b2xkQ2xlYXJBbHBoYSA9IHJlbmRlcmVyLmdldENsZWFyQWxwaGEoKTtcblx0XHRcdHJlbmRlcmVyLnNldENsZWFyQWxwaGEoIHRoaXMuY2xlYXJBbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyRGVwdGggPT0gdHJ1ZSApIHtcblxuXHRcdFx0cmVuZGVyZXIuY2xlYXJEZXB0aCgpO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnJlbmRlclRvU2NyZWVuID8gbnVsbCA6IHJlYWRCdWZmZXIgKTtcblxuXHRcdGlmICggdGhpcy5jbGVhciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gVE9ETzogQXZvaWQgdXNpbmcgYXV0b0NsZWFyIHByb3BlcnRpZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMTU1NzEjaXNzdWVjb21tZW50LTQ2NTY2OTYwMFxuXHRcdFx0cmVuZGVyZXIuY2xlYXIoIHJlbmRlcmVyLmF1dG9DbGVhckNvbG9yLCByZW5kZXJlci5hdXRvQ2xlYXJEZXB0aCwgcmVuZGVyZXIuYXV0b0NsZWFyU3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIucmVuZGVyKCB0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSApO1xuXG5cdFx0Ly8gcmVzdG9yZVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyQ29sb3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldENsZWFyQ29sb3IoIHRoaXMuX29sZENsZWFyQ29sb3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jbGVhckFscGhhICE9PSBudWxsICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRDbGVhckFscGhhKCBvbGRDbGVhckFscGhhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5zY2VuZS5vdmVycmlkZU1hdGVyaWFsID0gb2xkT3ZlcnJpZGVNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IG9sZEF1dG9DbGVhcjtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgUmVuZGVyUGFzcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6174\n");

/***/ }),

/***/ 157:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  C: () => (/* binding */ UnrealBloomPass)\n});\n\n// EXTERNAL MODULE: ../node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(9451);\n// EXTERNAL MODULE: ../node_modules/three/examples/jsm/postprocessing/Pass.js\nvar Pass = __webpack_require__(7598);\n// EXTERNAL MODULE: ../node_modules/three/examples/jsm/shaders/CopyShader.js\nvar CopyShader = __webpack_require__(9946);\n;// CONCATENATED MODULE: ../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js\n\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tname: 'LuminosityHighPassShader',\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new three_module/* Color */.Q1f( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\n\n\n;// CONCATENATED MODULE: ../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js\n\n\n\n\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass/* Pass */.o {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new three_module/* Vector2 */.I9Y( resolution.x, resolution.y ) : new three_module/* Vector2 */.I9Y( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new three_module/* Color */.Q1f( 0, 0, 0 );\n\n\t\t// render targets\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new three_module/* WebGLRenderTarget */.nWS( resx, resy, { type: three_module/* HalfFloatType */.ix0 } );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new three_module/* WebGLRenderTarget */.nWS( resx, resy, { type: three_module/* HalfFloatType */.ix0 } );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new three_module/* WebGLRenderTarget */.nWS( resx, resy, { type: three_module/* HalfFloatType */.ix0 } );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = three_module/* UniformsUtils */.LlO.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new three_module/* ShaderMaterial */.BKk( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader\n\t\t} );\n\n\t\t// gaussian blur materials\n\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new three_module/* Vector2 */.I9Y( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// composite material\n\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new three_module/* Vector3 */.Pq0( 1, 1, 1 ), new three_module/* Vector3 */.Pq0( 1, 1, 1 ), new three_module/* Vector3 */.Pq0( 1, 1, 1 ), new three_module/* Vector3 */.Pq0( 1, 1, 1 ), new three_module/* Vector3 */.Pq0( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// blend material\n\n\t\tconst copyShader = CopyShader/* CopyShader */.Z;\n\n\t\tthis.copyUniforms = three_module/* UniformsUtils */.LlO.clone( copyShader.uniforms );\n\n\t\tthis.blendMaterial = new three_module/* ShaderMaterial */.BKk( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: three_module/* AdditiveBlending */.EZo,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new three_module/* Color */.Q1f();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new three_module/* MeshBasicMaterial */.V9B();\n\n\t\tthis.fsQuad = new Pass/* FullScreenQuad */.F( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t\t//\n\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\n\n\t\t}\n\n\t\tthis.compositeMaterial.dispose();\n\t\tthis.blendMaterial.dispose();\n\t\tthis.basic.dispose();\n\n\t\t//\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new three_module/* Vector2 */.I9Y( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.blendMaterial;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\tconst coefficients = [];\n\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\n\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\n\n\t\t}\n\n\t\treturn new three_module/* ShaderMaterial */.BKk( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'invSize': { value: new three_module/* Vector2 */.I9Y( 0.5, 0.5 ) }, // inverse texture size\n\t\t\t\t'direction': { value: new three_module/* Vector2 */.I9Y( 0.5, 0.5 ) },\n\t\t\t\t'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 invSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new three_module/* ShaderMaterial */.BKk( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new three_module/* Vector2 */.I9Y( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new three_module/* Vector2 */.I9Y( 0.0, 1.0 );\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFxQyw2QkFBTztBQUM1QyxxQ0FBcUMsNkJBQU87O0FBRWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vc2hhZGVycy9MdW1pbm9zaXR5SGlnaFBhc3NTaGFkZXIuanM/ZWVjNCIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9VbnJlYWxCbG9vbVBhc3MuanM/Nzg4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb2xvclxufSBmcm9tICd0aHJlZSc7XG5cbi8qKlxuICogTHVtaW5vc2l0eVxuICogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MdW1pbm9zaXR5XG4gKi9cblxuY29uc3QgTHVtaW5vc2l0eUhpZ2hQYXNzU2hhZGVyID0ge1xuXG5cdG5hbWU6ICdMdW1pbm9zaXR5SGlnaFBhc3NTaGFkZXInLFxuXG5cdHNoYWRlcklEOiAnbHVtaW5vc2l0eUhpZ2hQYXNzJyxcblxuXHR1bmlmb3Jtczoge1xuXG5cdFx0J3REaWZmdXNlJzogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdCdsdW1pbm9zaXR5VGhyZXNob2xkJzogeyB2YWx1ZTogMS4wIH0sXG5cdFx0J3Ntb290aFdpZHRoJzogeyB2YWx1ZTogMS4wIH0sXG5cdFx0J2RlZmF1bHRDb2xvcic6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdCdkZWZhdWx0T3BhY2l0eSc6IHsgdmFsdWU6IDAuMCB9XG5cblx0fSxcblxuXHR2ZXJ0ZXhTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHR2VXYgPSB1djtcblxuXHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXG5cdFx0fWAsXG5cblx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHR1bmlmb3JtIHNhbXBsZXIyRCB0RGlmZnVzZTtcblx0XHR1bmlmb3JtIHZlYzMgZGVmYXVsdENvbG9yO1xuXHRcdHVuaWZvcm0gZmxvYXQgZGVmYXVsdE9wYWNpdHk7XG5cdFx0dW5pZm9ybSBmbG9hdCBsdW1pbm9zaXR5VGhyZXNob2xkO1xuXHRcdHVuaWZvcm0gZmxvYXQgc21vb3RoV2lkdGg7XG5cblx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHR2ZWM0IHRleGVsID0gdGV4dHVyZTJEKCB0RGlmZnVzZSwgdlV2ICk7XG5cblx0XHRcdHZlYzMgbHVtYSA9IHZlYzMoIDAuMjk5LCAwLjU4NywgMC4xMTQgKTtcblxuXHRcdFx0ZmxvYXQgdiA9IGRvdCggdGV4ZWwueHl6LCBsdW1hICk7XG5cblx0XHRcdHZlYzQgb3V0cHV0Q29sb3IgPSB2ZWM0KCBkZWZhdWx0Q29sb3IucmdiLCBkZWZhdWx0T3BhY2l0eSApO1xuXG5cdFx0XHRmbG9hdCBhbHBoYSA9IHNtb290aHN0ZXAoIGx1bWlub3NpdHlUaHJlc2hvbGQsIGx1bWlub3NpdHlUaHJlc2hvbGQgKyBzbW9vdGhXaWR0aCwgdiApO1xuXG5cdFx0XHRnbF9GcmFnQ29sb3IgPSBtaXgoIG91dHB1dENvbG9yLCB0ZXhlbCwgYWxwaGEgKTtcblxuXHRcdH1gXG5cbn07XG5cbmV4cG9ydCB7IEx1bWlub3NpdHlIaWdoUGFzc1NoYWRlciB9O1xuIiwiaW1wb3J0IHtcblx0QWRkaXRpdmVCbGVuZGluZyxcblx0Q29sb3IsXG5cdEhhbGZGbG9hdFR5cGUsXG5cdE1lc2hCYXNpY01hdGVyaWFsLFxuXHRTaGFkZXJNYXRlcmlhbCxcblx0VW5pZm9ybXNVdGlscyxcblx0VmVjdG9yMixcblx0VmVjdG9yMyxcblx0V2ViR0xSZW5kZXJUYXJnZXRcbn0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgUGFzcywgRnVsbFNjcmVlblF1YWQgfSBmcm9tICcuL1Bhc3MuanMnO1xuaW1wb3J0IHsgQ29weVNoYWRlciB9IGZyb20gJy4uL3NoYWRlcnMvQ29weVNoYWRlci5qcyc7XG5pbXBvcnQgeyBMdW1pbm9zaXR5SGlnaFBhc3NTaGFkZXIgfSBmcm9tICcuLi9zaGFkZXJzL0x1bWlub3NpdHlIaWdoUGFzc1NoYWRlci5qcyc7XG5cbi8qKlxuICogVW5yZWFsQmxvb21QYXNzIGlzIGluc3BpcmVkIGJ5IHRoZSBibG9vbSBwYXNzIG9mIFVucmVhbCBFbmdpbmUuIEl0IGNyZWF0ZXMgYVxuICogbWlwIG1hcCBjaGFpbiBvZiBibG9vbSB0ZXh0dXJlcyBhbmQgYmx1cnMgdGhlbSB3aXRoIGRpZmZlcmVudCByYWRpaS4gQmVjYXVzZVxuICogb2YgdGhlIHdlaWdodGVkIGNvbWJpbmF0aW9uIG9mIG1pcHMsIGFuZCBiZWNhdXNlIGxhcmdlciBibHVycyBhcmUgZG9uZSBvblxuICogaGlnaGVyIG1pcHMsIHRoaXMgZWZmZWN0IHByb3ZpZGVzIGdvb2QgcXVhbGl0eSBhbmQgcGVyZm9ybWFuY2UuXG4gKlxuICogUmVmZXJlbmNlOlxuICogLSBodHRwczovL2RvY3MudW5yZWFsZW5naW5lLmNvbS9sYXRlc3QvSU5UL0VuZ2luZS9SZW5kZXJpbmcvUG9zdFByb2Nlc3NFZmZlY3RzL0Jsb29tL1xuICovXG5jbGFzcyBVbnJlYWxCbG9vbVBhc3MgZXh0ZW5kcyBQYXNzIHtcblxuXHRjb25zdHJ1Y3RvciggcmVzb2x1dGlvbiwgc3RyZW5ndGgsIHJhZGl1cywgdGhyZXNob2xkICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuc3RyZW5ndGggPSAoIHN0cmVuZ3RoICE9PSB1bmRlZmluZWQgKSA/IHN0cmVuZ3RoIDogMTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHR0aGlzLnRocmVzaG9sZCA9IHRocmVzaG9sZDtcblx0XHR0aGlzLnJlc29sdXRpb24gPSAoIHJlc29sdXRpb24gIT09IHVuZGVmaW5lZCApID8gbmV3IFZlY3RvcjIoIHJlc29sdXRpb24ueCwgcmVzb2x1dGlvbi55ICkgOiBuZXcgVmVjdG9yMiggMjU2LCAyNTYgKTtcblxuXHRcdC8vIGNyZWF0ZSBjb2xvciBvbmx5IG9uY2UgaGVyZSwgcmV1c2UgaXQgbGF0ZXIgaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb25cblx0XHR0aGlzLmNsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKTtcblxuXHRcdC8vIHJlbmRlciB0YXJnZXRzXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbCA9IFtdO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0c1ZlcnRpY2FsID0gW107XG5cdFx0dGhpcy5uTWlwcyA9IDU7XG5cdFx0bGV0IHJlc3ggPSBNYXRoLnJvdW5kKCB0aGlzLnJlc29sdXRpb24ueCAvIDIgKTtcblx0XHRsZXQgcmVzeSA9IE1hdGgucm91bmQoIHRoaXMucmVzb2x1dGlvbi55IC8gMiApO1xuXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRCcmlnaHQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIHJlc3gsIHJlc3ksIHsgdHlwZTogSGFsZkZsb2F0VHlwZSB9ICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRCcmlnaHQudGV4dHVyZS5uYW1lID0gJ1VucmVhbEJsb29tUGFzcy5icmlnaHQnO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0QnJpZ2h0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLm5NaXBzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRIb3Jpem9uYWwgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIHJlc3gsIHJlc3ksIHsgdHlwZTogSGFsZkZsb2F0VHlwZSB9ICk7XG5cblx0XHRcdHJlbmRlclRhcmdldEhvcml6b25hbC50ZXh0dXJlLm5hbWUgPSAnVW5yZWFsQmxvb21QYXNzLmgnICsgaTtcblx0XHRcdHJlbmRlclRhcmdldEhvcml6b25hbC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsLnB1c2goIHJlbmRlclRhcmdldEhvcml6b25hbCApO1xuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRWZXJ0aWNhbCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggcmVzeCwgcmVzeSwgeyB0eXBlOiBIYWxmRmxvYXRUeXBlIH0gKTtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0VmVydGljYWwudGV4dHVyZS5uYW1lID0gJ1VucmVhbEJsb29tUGFzcy52JyArIGk7XG5cdFx0XHRyZW5kZXJUYXJnZXRWZXJ0aWNhbC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbC5wdXNoKCByZW5kZXJUYXJnZXRWZXJ0aWNhbCApO1xuXG5cdFx0XHRyZXN4ID0gTWF0aC5yb3VuZCggcmVzeCAvIDIgKTtcblxuXHRcdFx0cmVzeSA9IE1hdGgucm91bmQoIHJlc3kgLyAyICk7XG5cblx0XHR9XG5cblx0XHQvLyBsdW1pbm9zaXR5IGhpZ2ggcGFzcyBtYXRlcmlhbFxuXG5cdFx0Y29uc3QgaGlnaFBhc3NTaGFkZXIgPSBMdW1pbm9zaXR5SGlnaFBhc3NTaGFkZXI7XG5cdFx0dGhpcy5oaWdoUGFzc1VuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5jbG9uZSggaGlnaFBhc3NTaGFkZXIudW5pZm9ybXMgKTtcblxuXHRcdHRoaXMuaGlnaFBhc3NVbmlmb3Jtc1sgJ2x1bWlub3NpdHlUaHJlc2hvbGQnIF0udmFsdWUgPSB0aHJlc2hvbGQ7XG5cdFx0dGhpcy5oaWdoUGFzc1VuaWZvcm1zWyAnc21vb3RoV2lkdGgnIF0udmFsdWUgPSAwLjAxO1xuXG5cdFx0dGhpcy5tYXRlcmlhbEhpZ2hQYXNzRmlsdGVyID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHR1bmlmb3JtczogdGhpcy5oaWdoUGFzc1VuaWZvcm1zLFxuXHRcdFx0dmVydGV4U2hhZGVyOiBoaWdoUGFzc1NoYWRlci52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogaGlnaFBhc3NTaGFkZXIuZnJhZ21lbnRTaGFkZXJcblx0XHR9ICk7XG5cblx0XHQvLyBnYXVzc2lhbiBibHVyIG1hdGVyaWFsc1xuXG5cdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWxzID0gW107XG5cdFx0Y29uc3Qga2VybmVsU2l6ZUFycmF5ID0gWyAzLCA1LCA3LCA5LCAxMSBdO1xuXHRcdHJlc3ggPSBNYXRoLnJvdW5kKCB0aGlzLnJlc29sdXRpb24ueCAvIDIgKTtcblx0XHRyZXN5ID0gTWF0aC5yb3VuZCggdGhpcy5yZXNvbHV0aW9uLnkgLyAyICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLm5NaXBzOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHMucHVzaCggdGhpcy5nZXRTZXBlcmFibGVCbHVyTWF0ZXJpYWwoIGtlcm5lbFNpemVBcnJheVsgaSBdICkgKTtcblxuXHRcdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWxzWyBpIF0udW5pZm9ybXNbICdpbnZTaXplJyBdLnZhbHVlID0gbmV3IFZlY3RvcjIoIDEgLyByZXN4LCAxIC8gcmVzeSApO1xuXG5cdFx0XHRyZXN4ID0gTWF0aC5yb3VuZCggcmVzeCAvIDIgKTtcblxuXHRcdFx0cmVzeSA9IE1hdGgucm91bmQoIHJlc3kgLyAyICk7XG5cblx0XHR9XG5cblx0XHQvLyBjb21wb3NpdGUgbWF0ZXJpYWxcblxuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwgPSB0aGlzLmdldENvbXBvc2l0ZU1hdGVyaWFsKCB0aGlzLm5NaXBzICk7XG5cdFx0dGhpcy5jb21wb3NpdGVNYXRlcmlhbC51bmlmb3Jtc1sgJ2JsdXJUZXh0dXJlMScgXS52YWx1ZSA9IHRoaXMucmVuZGVyVGFyZ2V0c1ZlcnRpY2FsWyAwIF0udGV4dHVyZTtcblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsLnVuaWZvcm1zWyAnYmx1clRleHR1cmUyJyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbIDEgXS50ZXh0dXJlO1xuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwudW5pZm9ybXNbICdibHVyVGV4dHVyZTMnIF0udmFsdWUgPSB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFsgMiBdLnRleHR1cmU7XG5cdFx0dGhpcy5jb21wb3NpdGVNYXRlcmlhbC51bmlmb3Jtc1sgJ2JsdXJUZXh0dXJlNCcgXS52YWx1ZSA9IHRoaXMucmVuZGVyVGFyZ2V0c1ZlcnRpY2FsWyAzIF0udGV4dHVyZTtcblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsLnVuaWZvcm1zWyAnYmx1clRleHR1cmU1JyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbIDQgXS50ZXh0dXJlO1xuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwudW5pZm9ybXNbICdibG9vbVN0cmVuZ3RoJyBdLnZhbHVlID0gc3RyZW5ndGg7XG5cdFx0dGhpcy5jb21wb3NpdGVNYXRlcmlhbC51bmlmb3Jtc1sgJ2Jsb29tUmFkaXVzJyBdLnZhbHVlID0gMC4xO1xuXG5cdFx0Y29uc3QgYmxvb21GYWN0b3JzID0gWyAxLjAsIDAuOCwgMC42LCAwLjQsIDAuMiBdO1xuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwudW5pZm9ybXNbICdibG9vbUZhY3RvcnMnIF0udmFsdWUgPSBibG9vbUZhY3RvcnM7XG5cdFx0dGhpcy5ibG9vbVRpbnRDb2xvcnMgPSBbIG5ldyBWZWN0b3IzKCAxLCAxLCAxICksIG5ldyBWZWN0b3IzKCAxLCAxLCAxICksIG5ldyBWZWN0b3IzKCAxLCAxLCAxICksIG5ldyBWZWN0b3IzKCAxLCAxLCAxICksIG5ldyBWZWN0b3IzKCAxLCAxLCAxICkgXTtcblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsLnVuaWZvcm1zWyAnYmxvb21UaW50Q29sb3JzJyBdLnZhbHVlID0gdGhpcy5ibG9vbVRpbnRDb2xvcnM7XG5cblx0XHQvLyBibGVuZCBtYXRlcmlhbFxuXG5cdFx0Y29uc3QgY29weVNoYWRlciA9IENvcHlTaGFkZXI7XG5cblx0XHR0aGlzLmNvcHlVbmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMuY2xvbmUoIGNvcHlTaGFkZXIudW5pZm9ybXMgKTtcblxuXHRcdHRoaXMuYmxlbmRNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0dW5pZm9ybXM6IHRoaXMuY29weVVuaWZvcm1zLFxuXHRcdFx0dmVydGV4U2hhZGVyOiBjb3B5U2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBjb3B5U2hhZGVyLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0YmxlbmRpbmc6IEFkZGl0aXZlQmxlbmRpbmcsXG5cdFx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy5uZWVkc1N3YXAgPSBmYWxzZTtcblxuXHRcdHRoaXMuX29sZENsZWFyQ29sb3IgPSBuZXcgQ29sb3IoKTtcblx0XHR0aGlzLm9sZENsZWFyQWxwaGEgPSAxO1xuXG5cdFx0dGhpcy5iYXNpYyA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpO1xuXG5cdFx0dGhpcy5mc1F1YWQgPSBuZXcgRnVsbFNjcmVlblF1YWQoIG51bGwgKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMucmVuZGVyVGFyZ2V0c0hvcml6b250YWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsWyBpIF0uZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFsgaSBdLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0QnJpZ2h0LmRpc3Bvc2UoKTtcblxuXHRcdC8vXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHNbIGkgXS5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHR0aGlzLmJsZW5kTWF0ZXJpYWwuZGlzcG9zZSgpO1xuXHRcdHRoaXMuYmFzaWMuZGlzcG9zZSgpO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuZnNRdWFkLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0c2V0U2l6ZSggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGxldCByZXN4ID0gTWF0aC5yb3VuZCggd2lkdGggLyAyICk7XG5cdFx0bGV0IHJlc3kgPSBNYXRoLnJvdW5kKCBoZWlnaHQgLyAyICk7XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldEJyaWdodC5zZXRTaXplKCByZXN4LCByZXN5ICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLm5NaXBzOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsWyBpIF0uc2V0U2l6ZSggcmVzeCwgcmVzeSApO1xuXHRcdFx0dGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbIGkgXS5zZXRTaXplKCByZXN4LCByZXN5ICk7XG5cblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsc1sgaSBdLnVuaWZvcm1zWyAnaW52U2l6ZScgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCAxIC8gcmVzeCwgMSAvIHJlc3kgKTtcblxuXHRcdFx0cmVzeCA9IE1hdGgucm91bmQoIHJlc3ggLyAyICk7XG5cdFx0XHRyZXN5ID0gTWF0aC5yb3VuZCggcmVzeSAvIDIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmVuZGVyKCByZW5kZXJlciwgd3JpdGVCdWZmZXIsIHJlYWRCdWZmZXIsIGRlbHRhVGltZSwgbWFza0FjdGl2ZSApIHtcblxuXHRcdHJlbmRlcmVyLmdldENsZWFyQ29sb3IoIHRoaXMuX29sZENsZWFyQ29sb3IgKTtcblx0XHR0aGlzLm9sZENsZWFyQWxwaGEgPSByZW5kZXJlci5nZXRDbGVhckFscGhhKCk7XG5cdFx0Y29uc3Qgb2xkQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXG5cdFx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggdGhpcy5jbGVhckNvbG9yLCAwICk7XG5cblx0XHRpZiAoIG1hc2tBY3RpdmUgKSByZW5kZXJlci5zdGF0ZS5idWZmZXJzLnN0ZW5jaWwuc2V0VGVzdCggZmFsc2UgKTtcblxuXHRcdC8vIFJlbmRlciBpbnB1dCB0byBzY3JlZW5cblxuXHRcdGlmICggdGhpcy5yZW5kZXJUb1NjcmVlbiApIHtcblxuXHRcdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLmJhc2ljO1xuXHRcdFx0dGhpcy5iYXNpYy5tYXAgPSByZWFkQnVmZmVyLnRleHR1cmU7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggbnVsbCApO1xuXHRcdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdH1cblxuXHRcdC8vIDEuIEV4dHJhY3QgQnJpZ2h0IEFyZWFzXG5cblx0XHR0aGlzLmhpZ2hQYXNzVW5pZm9ybXNbICd0RGlmZnVzZScgXS52YWx1ZSA9IHJlYWRCdWZmZXIudGV4dHVyZTtcblx0XHR0aGlzLmhpZ2hQYXNzVW5pZm9ybXNbICdsdW1pbm9zaXR5VGhyZXNob2xkJyBdLnZhbHVlID0gdGhpcy50aHJlc2hvbGQ7XG5cdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsSGlnaFBhc3NGaWx0ZXI7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMucmVuZGVyVGFyZ2V0QnJpZ2h0ICk7XG5cdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHR0aGlzLmZzUXVhZC5yZW5kZXIoIHJlbmRlcmVyICk7XG5cblx0XHQvLyAyLiBCbHVyIEFsbCB0aGUgbWlwcyBwcm9ncmVzc2l2ZWx5XG5cblx0XHRsZXQgaW5wdXRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldEJyaWdodDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMubk1pcHM7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZnNRdWFkLm1hdGVyaWFsID0gdGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWxzWyBpIF07XG5cblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsc1sgaSBdLnVuaWZvcm1zWyAnY29sb3JUZXh0dXJlJyBdLnZhbHVlID0gaW5wdXRSZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsc1sgaSBdLnVuaWZvcm1zWyAnZGlyZWN0aW9uJyBdLnZhbHVlID0gVW5yZWFsQmxvb21QYXNzLkJsdXJEaXJlY3Rpb25YO1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnJlbmRlclRhcmdldHNIb3Jpem9udGFsWyBpIF0gKTtcblx0XHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0XHR0aGlzLmZzUXVhZC5yZW5kZXIoIHJlbmRlcmVyICk7XG5cblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsc1sgaSBdLnVuaWZvcm1zWyAnY29sb3JUZXh0dXJlJyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbFsgaSBdLnRleHR1cmU7XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbHNbIGkgXS51bmlmb3Jtc1sgJ2RpcmVjdGlvbicgXS52YWx1ZSA9IFVucmVhbEJsb29tUGFzcy5CbHVyRGlyZWN0aW9uWTtcblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGhpcy5yZW5kZXJUYXJnZXRzVmVydGljYWxbIGkgXSApO1xuXHRcdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdFx0aW5wdXRSZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldHNWZXJ0aWNhbFsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ29tcG9zaXRlIEFsbCB0aGUgbWlwc1xuXG5cdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsO1xuXHRcdHRoaXMuY29tcG9zaXRlTWF0ZXJpYWwudW5pZm9ybXNbICdibG9vbVN0cmVuZ3RoJyBdLnZhbHVlID0gdGhpcy5zdHJlbmd0aDtcblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsLnVuaWZvcm1zWyAnYmxvb21SYWRpdXMnIF0udmFsdWUgPSB0aGlzLnJhZGl1cztcblx0XHR0aGlzLmNvbXBvc2l0ZU1hdGVyaWFsLnVuaWZvcm1zWyAnYmxvb21UaW50Q29sb3JzJyBdLnZhbHVlID0gdGhpcy5ibG9vbVRpbnRDb2xvcnM7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMucmVuZGVyVGFyZ2V0c0hvcml6b250YWxbIDAgXSApO1xuXHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0dGhpcy5mc1F1YWQucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0Ly8gQmxlbmQgaXQgYWRkaXRpdmVseSBvdmVyIHRoZSBpbnB1dCB0ZXh0dXJlXG5cblx0XHR0aGlzLmZzUXVhZC5tYXRlcmlhbCA9IHRoaXMuYmxlbmRNYXRlcmlhbDtcblx0XHR0aGlzLmNvcHlVbmlmb3Jtc1sgJ3REaWZmdXNlJyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRzSG9yaXpvbnRhbFsgMCBdLnRleHR1cmU7XG5cblx0XHRpZiAoIG1hc2tBY3RpdmUgKSByZW5kZXJlci5zdGF0ZS5idWZmZXJzLnN0ZW5jaWwuc2V0VGVzdCggdHJ1ZSApO1xuXG5cdFx0aWYgKCB0aGlzLnJlbmRlclRvU2NyZWVuICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVhZEJ1ZmZlciApO1xuXHRcdFx0dGhpcy5mc1F1YWQucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gUmVzdG9yZSByZW5kZXJlciBzZXR0aW5nc1xuXG5cdFx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggdGhpcy5fb2xkQ2xlYXJDb2xvciwgdGhpcy5vbGRDbGVhckFscGhhICk7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gb2xkQXV0b0NsZWFyO1xuXG5cdH1cblxuXHRnZXRTZXBlcmFibGVCbHVyTWF0ZXJpYWwoIGtlcm5lbFJhZGl1cyApIHtcblxuXHRcdGNvbnN0IGNvZWZmaWNpZW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwga2VybmVsUmFkaXVzOyBpICsrICkge1xuXG5cdFx0XHRjb2VmZmljaWVudHMucHVzaCggMC4zOTg5NCAqIE1hdGguZXhwKCAtIDAuNSAqIGkgKiBpIC8gKCBrZXJuZWxSYWRpdXMgKiBrZXJuZWxSYWRpdXMgKSApIC8ga2VybmVsUmFkaXVzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRcdGRlZmluZXM6IHtcblx0XHRcdFx0J0tFUk5FTF9SQURJVVMnOiBrZXJuZWxSYWRpdXNcblx0XHRcdH0sXG5cblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdCdjb2xvclRleHR1cmUnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdpbnZTaXplJzogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSwgLy8gaW52ZXJzZSB0ZXh0dXJlIHNpemVcblx0XHRcdFx0J2RpcmVjdGlvbic6IHsgdmFsdWU6IG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApIH0sXG5cdFx0XHRcdCdnYXVzc2lhbkNvZWZmaWNpZW50cyc6IHsgdmFsdWU6IGNvZWZmaWNpZW50cyB9IC8vIHByZWNvbXB1dGVkIEdhdXNzaWFuIGNvZWZmaWNpZW50c1xuXHRcdFx0fSxcblxuXHRcdFx0dmVydGV4U2hhZGVyOlxuXHRcdFx0XHRgdmFyeWluZyB2ZWMyIHZVdjtcblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdHZVdiA9IHV2O1xuXHRcdFx0XHRcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcblx0XHRcdFx0fWAsXG5cblx0XHRcdGZyYWdtZW50U2hhZGVyOlxuXHRcdFx0XHRgI2luY2x1ZGUgPGNvbW1vbj5cblx0XHRcdFx0dmFyeWluZyB2ZWMyIHZVdjtcblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgY29sb3JUZXh0dXJlO1xuXHRcdFx0XHR1bmlmb3JtIHZlYzIgaW52U2l6ZTtcblx0XHRcdFx0dW5pZm9ybSB2ZWMyIGRpcmVjdGlvbjtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBnYXVzc2lhbkNvZWZmaWNpZW50c1tLRVJORUxfUkFESVVTXTtcblxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRcdFx0ZmxvYXQgd2VpZ2h0U3VtID0gZ2F1c3NpYW5Db2VmZmljaWVudHNbMF07XG5cdFx0XHRcdFx0dmVjMyBkaWZmdXNlU3VtID0gdGV4dHVyZTJEKCBjb2xvclRleHR1cmUsIHZVdiApLnJnYiAqIHdlaWdodFN1bTtcblx0XHRcdFx0XHRmb3IoIGludCBpID0gMTsgaSA8IEtFUk5FTF9SQURJVVM7IGkgKysgKSB7XG5cdFx0XHRcdFx0XHRmbG9hdCB4ID0gZmxvYXQoaSk7XG5cdFx0XHRcdFx0XHRmbG9hdCB3ID0gZ2F1c3NpYW5Db2VmZmljaWVudHNbaV07XG5cdFx0XHRcdFx0XHR2ZWMyIHV2T2Zmc2V0ID0gZGlyZWN0aW9uICogaW52U2l6ZSAqIHg7XG5cdFx0XHRcdFx0XHR2ZWMzIHNhbXBsZTEgPSB0ZXh0dXJlMkQoIGNvbG9yVGV4dHVyZSwgdlV2ICsgdXZPZmZzZXQgKS5yZ2I7XG5cdFx0XHRcdFx0XHR2ZWMzIHNhbXBsZTIgPSB0ZXh0dXJlMkQoIGNvbG9yVGV4dHVyZSwgdlV2IC0gdXZPZmZzZXQgKS5yZ2I7XG5cdFx0XHRcdFx0XHRkaWZmdXNlU3VtICs9IChzYW1wbGUxICsgc2FtcGxlMikgKiB3O1xuXHRcdFx0XHRcdFx0d2VpZ2h0U3VtICs9IDIuMCAqIHc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoZGlmZnVzZVN1bS93ZWlnaHRTdW0sIDEuMCk7XG5cdFx0XHRcdH1gXG5cdFx0fSApO1xuXG5cdH1cblxuXHRnZXRDb21wb3NpdGVNYXRlcmlhbCggbk1pcHMgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRcdGRlZmluZXM6IHtcblx0XHRcdFx0J05VTV9NSVBTJzogbk1pcHNcblx0XHRcdH0sXG5cblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdCdibHVyVGV4dHVyZTEnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibHVyVGV4dHVyZTInOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibHVyVGV4dHVyZTMnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibHVyVGV4dHVyZTQnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibHVyVGV4dHVyZTUnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibG9vbVN0cmVuZ3RoJzogeyB2YWx1ZTogMS4wIH0sXG5cdFx0XHRcdCdibG9vbUZhY3RvcnMnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibG9vbVRpbnRDb2xvcnMnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdibG9vbVJhZGl1cyc6IHsgdmFsdWU6IDAuMCB9XG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6XG5cdFx0XHRcdGB2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRcdFx0dlV2ID0gdXY7XG5cdFx0XHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXHRcdFx0XHR9YCxcblxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6XG5cdFx0XHRcdGB2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCBibHVyVGV4dHVyZTE7XG5cdFx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGJsdXJUZXh0dXJlMjtcblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgYmx1clRleHR1cmUzO1xuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCBibHVyVGV4dHVyZTQ7XG5cdFx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGJsdXJUZXh0dXJlNTtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBibG9vbVN0cmVuZ3RoO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IGJsb29tUmFkaXVzO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IGJsb29tRmFjdG9yc1tOVU1fTUlQU107XG5cdFx0XHRcdHVuaWZvcm0gdmVjMyBibG9vbVRpbnRDb2xvcnNbTlVNX01JUFNdO1xuXG5cdFx0XHRcdGZsb2F0IGxlcnBCbG9vbUZhY3Rvcihjb25zdCBpbiBmbG9hdCBmYWN0b3IpIHtcblx0XHRcdFx0XHRmbG9hdCBtaXJyb3JGYWN0b3IgPSAxLjIgLSBmYWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIG1peChmYWN0b3IsIG1pcnJvckZhY3RvciwgYmxvb21SYWRpdXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IGJsb29tU3RyZW5ndGggKiAoIGxlcnBCbG9vbUZhY3RvcihibG9vbUZhY3RvcnNbMF0pICogdmVjNChibG9vbVRpbnRDb2xvcnNbMF0sIDEuMCkgKiB0ZXh0dXJlMkQoYmx1clRleHR1cmUxLCB2VXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbUZhY3RvcnNbMV0pICogdmVjNChibG9vbVRpbnRDb2xvcnNbMV0sIDEuMCkgKiB0ZXh0dXJlMkQoYmx1clRleHR1cmUyLCB2VXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbUZhY3RvcnNbMl0pICogdmVjNChibG9vbVRpbnRDb2xvcnNbMl0sIDEuMCkgKiB0ZXh0dXJlMkQoYmx1clRleHR1cmUzLCB2VXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbUZhY3RvcnNbM10pICogdmVjNChibG9vbVRpbnRDb2xvcnNbM10sIDEuMCkgKiB0ZXh0dXJlMkQoYmx1clRleHR1cmU0LCB2VXYpICtcblx0XHRcdFx0XHRcdGxlcnBCbG9vbUZhY3RvcihibG9vbUZhY3RvcnNbNF0pICogdmVjNChibG9vbVRpbnRDb2xvcnNbNF0sIDEuMCkgKiB0ZXh0dXJlMkQoYmx1clRleHR1cmU1LCB2VXYpICk7XG5cdFx0XHRcdH1gXG5cdFx0fSApO1xuXG5cdH1cblxufVxuXG5VbnJlYWxCbG9vbVBhc3MuQmx1ckRpcmVjdGlvblggPSBuZXcgVmVjdG9yMiggMS4wLCAwLjAgKTtcblVucmVhbEJsb29tUGFzcy5CbHVyRGlyZWN0aW9uWSA9IG5ldyBWZWN0b3IyKCAwLjAsIDEuMCApO1xuXG5leHBvcnQgeyBVbnJlYWxCbG9vbVBhc3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///157\n");

/***/ }),

/***/ 9946:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ CopyShader)\n/* harmony export */ });\n/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}`\n\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk0Ni5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsZ0JBQWdCLGFBQWE7QUFDN0IsZUFBZTs7QUFFZixFQUFFOztBQUVGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQSxHQUFHOztBQUVIOztBQUVzQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL3NoYWRlcnMvQ29weVNoYWRlci5qcz81MTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRnVsbC1zY3JlZW4gdGV4dHVyZWQgcXVhZCBzaGFkZXJcbiAqL1xuXG5jb25zdCBDb3B5U2hhZGVyID0ge1xuXG5cdG5hbWU6ICdDb3B5U2hhZGVyJyxcblxuXHR1bmlmb3Jtczoge1xuXG5cdFx0J3REaWZmdXNlJzogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdCdvcGFjaXR5JzogeyB2YWx1ZTogMS4wIH1cblxuXHR9LFxuXG5cdHZlcnRleFNoYWRlcjogLyogZ2xzbCAqL2BcblxuXHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdHZVdiA9IHV2O1xuXHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXG5cdFx0fWAsXG5cblx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHR1bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG5cblx0XHR1bmlmb3JtIHNhbXBsZXIyRCB0RGlmZnVzZTtcblxuXHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdHZlYzQgdGV4ZWwgPSB0ZXh0dXJlMkQoIHREaWZmdXNlLCB2VXYgKTtcblx0XHRcdGdsX0ZyYWdDb2xvciA9IG9wYWNpdHkgKiB0ZXhlbDtcblxuXG5cdFx0fWBcblxufTtcblxuZXhwb3J0IHsgQ29weVNoYWRlciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9946\n");

/***/ })

}]);